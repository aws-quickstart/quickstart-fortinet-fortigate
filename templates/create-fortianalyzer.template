{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploys a FortiAnalyzer to a selected subnet and configures all FortiGates to connect to it.",
    "Parameters": {
        "S3BucketName": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "S3KeyPrefix": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
        },
        "ResourceTagPrefix": {
            "Type": "String",
            "AllowedPattern": "[0-9a-zA-Z@.#-]+",
            "MaxLength": 64,
            "ConstraintDescription": "Resource tag prefix can include numbers, lowercase letters, uppercase letters, ampersat(@) , hyphens (-), period (.), and hash (#). Max length is 64.",
            "Description": "A prefix for tag key ResourceGroup on all resources. It's also used as the name prefix of all applicable resources. Can only contain numbers, lowercase letters, uppercase letters, ampersat(@) , hyphens (-), period (.), and hash (#). Max length is 64."
        },
        "CustomIdentifier": {
            "Type": "String",
            "MaxLength": "10",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and numbers",
            "Description": "An identifier as resource name prefix. Must be at most 10 characters long and only contain uppercase, lowercase letters, and numbers."
        },
        "UniqueId": {
            "Type": "String",
            "Description": "The unique ID assigned to DynamoDB table in this solution. This parameter should be passed down from the caller stack for consistency."
        },
        "DdbTableArnList": {
            "Type": "String",
            "Description": "The DynamoDB table ARN list that this stack needs to access to. This parameter should be passed down from the caller stack for consistency."
        },
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "Enter a valid VPC ID to deploy. The VPC must have the option 'DNS hostnames' enabled."
        },
        "VPCCIDR": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the VPC where the FortiAnalyzer is deployed."
        },
        "VPCEndpoint": {
            "Type": "String",
            "Description": "The VPCEndpoint for calling the service through API Gateway."
        },
        "SubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "The subnet ID to deploy the FortiAnalyzer."
        },
        "InstanceType": {
            "Type": "String",
            "Description": "Instance Type. This parameter should be passed down from the caller stack for consistency."
        },
        "FortiAnalyzerVersion": {
            "Type": "String",
            "AllowedPattern": "[A-Za-z0-9]+",
            "Description": "FortiAnalyzer version. This parameter should be passed down from the caller stack for consistency. Should contain characters and digits only, and should not include dot (.) or hyphen (-)."
        },
        "AdminCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format and 0.0.0.0/0 is not recommended.",
            "MinLength": 9,
            "Description": "CIDR block for external admin management access. **WARNING!** The default value 0.0.0.0/0 accepts connections from any IP address. Please consider hanging it to match your needs."
        },
        "KeyPairName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Amazon EC2 Key Pair for admin access."
        },
        "AutoscaleAdminUsername": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "This FortiAnalyzer account name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "The name of the secondary administrator level account in the FortiAnalyzer, which the FortiGate Autoscale uses to connect to the FortiAnalyzer to authorize any FortiGate device in the Auto Scaling Group. The naming requirement conforms to the FortiAnalyzer naming policy. This name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "AutoscaleAdminPassword": {
            "Type": "String",
            "NoEcho": true,
            "MinLength": 8,
            "MaxLength": 128,
            "Description": "The password for the 'Autoscale admin' above. The password requirement conforms to the FortiAnalyzer password policy. Please see the documentation for more information if you need to enable KMS encryption. Min length is 8 and Max length 128."
        },
        "ProductAMI": {
            "Type": "String",
            "Description": "The AMI for the product created with EC2 Instance in this stack."
        }
    },
    "Mappings": {},
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "IfAddCustomTag": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "CustomIdentifier"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Resources": {
        "sgFortiAnalyzerInstance": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "FortiAnalyzer security group",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": {
                            "Ref": "AdminCidr"
                        },
                        "FromPort": 22,
                        "ToPort": 22
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": {
                            "Ref": "AdminCidr"
                        },
                        "FromPort": 443,
                        "ToPort": 443
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        },
                        "FromPort": 541,
                        "ToPort": 541
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        },
                        "FromPort": 514,
                        "ToPort": 514
                    },
                    {
                        "IpProtocol": "udp",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        },
                        "FromPort": 514,
                        "ToPort": 514
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "IamRoleFazInstance": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaExecute"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": ["s3:GetObject"],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:s3:::${S3BucketName}/${S3KeyPrefix}*",
                                            {
                                                "S3BucketName": {
                                                    "Ref": "S3BucketName"
                                                },
                                                "S3KeyPrefix": {
                                                    "Ref": "S3KeyPrefix"
                                                }
                                            }
                                        ]
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "aws-quick-start-s3-policy"
                    }
                ]
            }
        },
        "IamInstanceProfileFaz": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "IamRoleFazInstance"
                    }
                ]
            }
        },
        "ec2InstanceFortiAnalyzer": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "IamInstanceProfile": {
                    "Ref": "IamInstanceProfileFaz"
                },
                "ImageId": {
                    "Ref": "ProductAMI"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": 0,
                        "AssociatePublicIpAddress": true,
                        "SubnetId": {
                            "Ref": "SubnetId"
                        },
                        "GroupSet": [
                            {
                                "Ref": "sgFortiAnalyzerInstance"
                            }
                        ]
                    }
                ],
                "Monitoring": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::If": [
                                "IfAddCustomTag",
                                {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            {
                                                "Ref": "CustomIdentifier"
                                            },
                                            "FortiAnalyzer"
                                        ]
                                    ]
                                },
                                "FortiAnalyzer"
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "config system admin user",
                                {
                                    "Fn::Sub": [
                                        "  edit ${AdminUsername}",
                                        {
                                            "AdminUsername": {
                                                "Ref": "AutoscaleAdminUsername"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "Fn::Sub": [
                                        "    set password ${AdminPasword}",
                                        {
                                            "AdminPasword": {
                                                "Ref": "AutoscaleAdminPassword"
                                            }
                                        }
                                    ]
                                },
                                "    set profileid \"Super_User\"",
                                "    set adom \"all_adoms\"",
                                "    set rpc-permit read-write",
                                "  next",
                                "end"
                            ]
                        ]
                    }
                }
            }
        },
        "FazHandlerService": {
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": ["LambdaFunctionFazHandler", "Arn"]
                },
                "ServiceType": "registration",
                "InstanceId": {
                    "Ref": "ec2InstanceFortiAnalyzer"
                },
                "PrivateIp": {
                    "Fn::GetAtt": ["ec2InstanceFortiAnalyzer", "PrivateIp"]
                },
                "CustomIdentifier": {
                    "Ref": "CustomIdentifier"
                },
                "UniqueId": {
                    "Ref": "UniqueId"
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
        "FazHandlerServiceScheduledRule": {
            "Type": "AWS::Events::Rule",
            "DependsOn": ["FazHandlerService"],
            "Properties": {
                "Description": "Trigger FortiAnalyzer to authorize unregistered devices on a 5-min basis.",
                "ScheduleExpression": "rate(5 minutes)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": ["LambdaFunctionFazHandler", "Arn"]
                        },
                        "Id": {
                            "Fn::Sub": [
                                "${FunctionName}-scheduled-rule",
                                {
                                    "FunctionName": {
                                        "Ref": "LambdaFunctionFazHandler"
                                    }
                                }
                            ]
                        },
                        "Input": "{ \"ResourceProperties\": {\"ServiceType\": \"authorizeFgt\"} }"
                    }
                ]
            }
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaFunctionFazHandler"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": ["FazHandlerServiceScheduledRule", "Arn"]
                }
            }
        },
        "StackCopyLambda": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ObjectPaths": "functions/packages/faz-handler.zip"
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/copy-objects.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "LambdaFunctionFazHandler": {
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            {
                                "Ref": "UniqueId"
                            },
                            "fortianalyzer-handler"
                        ]
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::GetAtt": ["StackCopyLambda", "Outputs.DestinationBucket"]
                    },
                    "S3Key": {
                        "Fn::Sub": [
                            "${KeyPrefix}functions/packages/faz-handler.zip",
                            {
                                "KeyPrefix": {
                                    "Fn::GetAtt": ["StackCopyLambda", "Outputs.KeyPrefix"]
                                }
                            }
                        ]
                    }
                },
                "Description": "Register a FortiAnalyzer to DB for the FortiGate AutoScale",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": ["IamRoleFazHandler", "Arn"]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 300,
                "Environment": {
                    "Variables": {
                        "RESOURCE_TAG_PREFIX": {
                            "Ref": "ResourceTagPrefix"
                        },
                        "CUSTOM_ID": "",
                        "UNIQUE_ID": "",
                        "STACK_ID": {
                            "Ref": "AWS::StackId"
                        },
                        "INSTANCE_ID": {
                            "Ref": "ec2InstanceFortiAnalyzer"
                        },
                        "AUTOSCALE_ADMIN_USERNAME": {
                            "Ref": "AutoscaleAdminUsername"
                        },
                        "AUTOSCALE_ADMIN_PASSWORD": {
                            "Ref": "AutoscaleAdminPassword"
                        },
                        "FORTIANALYZER_IP": {
                            "Fn::GetAtt": ["ec2InstanceFortiAnalyzer", "PublicIp"]
                        },
                        "FORTIANALYZER_PORT": "443",
                        "USE_AUTOSCALE_ADMIN_ACCOUNT": "true"
                    }
                }
            },
            "Type": "AWS::Lambda::Function"
        },
        "IamRoleFazHandler": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "faz-handler-inline-policy",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:CreateTable",
                                        "dynamodb:DescribeTable",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:dynamodb:${AWS_REGION}:${AWS_ACCOUNT_ID}:table/${TABLE_NAME_PREFIX}*",
                                            {
                                                "AWS_REGION": {
                                                    "Ref": "AWS::Region"
                                                },
                                                "AWS_ACCOUNT_ID": {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                "TABLE_NAME_PREFIX": {
                                                    "Ref": "ResourceTagPrefix"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups"
                                    ],
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        }
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "IamPolicyFazHandler": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": ["kms:Decrypt"],
                            "Resource": "arn:aws:kms:*:*:key/*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:GetFunction",
                                "lambda:GetFunctionConfiguration",
                                "lambda:UpdateFunctionConfiguration"
                            ],
                            "Resource": {
                                "Fn::GetAtt": ["LambdaFunctionFazHandler", "Arn"]
                            }
                        }
                    ]
                },
                "PolicyName": "faz-handler-lambda-function-policy",
                "Roles": [
                    {
                        "Ref": "IamRoleFazHandler"
                    }
                ]
            }
        },
        "ApiGatewayFazService": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "fortianalyzer-handler",
                            {
                                "Ref": "UniqueId"
                            }
                        ]
                    ]
                },
                "EndpointConfiguration": {
                    "Types": ["PRIVATE"]
                },
                "Policy": {
                    "Fn::Sub": [
                        "{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":\\\"*\\\",\\\"Action\\\":\\\"execute-api:Invoke\\\",\\\"Resource\\\":\\\"execute-api:\\/*\\\",\\\"Condition\\\":{\\\"StringEquals\\\":{\\\"aws:sourceVpce\\\":\\\"${vpce}\\\"}}}]}",
                        {
                            "vpce": {
                                "Ref": "VPCEndpoint"
                            }
                        }
                    ]
                }
            }
        },
        "ApiGwResFazHandler": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayFazService"
                },
                "PathPart": "faz-handler",
                "ParentId": {
                    "Fn::GetAtt": ["ApiGatewayFazService", "RootResourceId"]
                }
            }
        },
        "ApiGwMethodFazHandler": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "ResourceId": {
                    "Ref": "ApiGwResFazHandler"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayFazService"
                },
                "AuthorizationType": "NONE",
                "HttpMethod": "POST",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": ["LambdaFunctionFazHandler", "Arn"]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                }
            }
        },
        "ApiGwDeploymentFazHandler": {
            "DependsOn": ["ApiGwMethodFazHandler"],
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayFazService"
                },
                "StageName": "prod"
            }
        }
    },
    "Outputs": {
        "InstanceId": {
            "Description": "The instance ID of the created FortiAnalyzer.",
            "Value": {
                "Fn::GetAtt": ["FazHandlerService", "InstanceId"]
            }
        },
        "PublicIp": {
            "Description": "The public ip of the created FortiAnalyzer.",
            "Value": {
                "Fn::GetAtt": ["ec2InstanceFortiAnalyzer", "PublicIp"]
            }
        },
        "PrivateIp": {
            "Description": "The private ip of the created FortiAnalyzer.",
            "Value": {
                "Fn::GetAtt": ["FazHandlerService", "PrivateIp"]
            }
        },
        "VIP": {
            "Description": "The vip of the created FortiAnalyzer.",
            "Value": {
                "Fn::GetAtt": ["FazHandlerService", "VIP"]
            }
        },
        "FazHandlerServiceToken": {
            "Description": "The service token for the FortiAnalyzer registration service.",
            "Value": {
                "Fn::GetAtt": ["LambdaFunctionFazHandler", "Arn"]
            }
        },
        "RestApiId": {
            "Description": "The API Id of the API Gateway for FAZ service.",
            "Value": {
                "Ref": "ApiGatewayFazService"
            }
        },
        "FazHandlerFunctionName": {
            "Description": "FortiGate Autoscale - FortiAnalyzer handler function name",
            "Value": {
                "Ref": "LambdaFunctionFazHandler"
            }
        },
        "FazHandlerFunctionArn": {
            "Description": "FortiGate Autoscale - FortiAnalyzer handler function ARN",
            "Value": {
                "Fn::GetAtt": ["LambdaFunctionFazHandler", "Arn"]
            }
        }
    }
}
